package com.example.gptproxy

import android.Manifest
import android.annotation.SuppressLint
import android.app.AlertDialog
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.os.Bundle
import android.telephony.SmsMessage
import android.telephony.SmsManager
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import org.json.JSONArray
import org.json.JSONObject
import java.io.IOException
import java.util.concurrent.TimeUnit

class MainActivity : AppCompatActivity() {

    private lateinit var logView: TextView
    private lateinit var scrollView: ScrollView
    private lateinit var inputField: EditText
    private lateinit var btnSend: Button
    private lateinit var btnSelectModel: Button
    private lateinit var btnSetTokens: Button

    private val availableModels = listOf(
        "mistralai/Mistral-Large-Instruct-2411",
        "openai/gpt-oss-20b",
        "openai/gpt-oss-120b",
        "meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8",
        "Qwen/Qwen3-235B-A22B-Thinking-2507",
        "meta-llama/Llama-3.3-70B-Instruct"
    )

    private var maxTokens: Int = 200 // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // –¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    private var currentModel = "openai/gpt-oss-120b"

    // –¢–µ–∫—É—â–∏–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å SMS (—á—Ç–æ–±—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å)
    private var currentSender: String? = null

    // API Key (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
    private val apiKey = "io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6Ijg4YWI3Mzg2LTdmZDAtNDhmYy1iYjNlLTU3ZjlhNmNlZDI0MiIsImV4cCI6NDkwOTUzNTY0M30.XyxRgO0dL0OcnL3Vz-XnTMXCXNLduVRrk8txgc0qlFsXZy5TlummTd4NDSS_ehen6zwI1lEhUELqhezEEqlq3g"

    private val client = OkHttpClient.Builder()
        .connectTimeout(30, TimeUnit.SECONDS)
        .writeTimeout(30, TimeUnit.SECONDS)
        .readTimeout(60, TimeUnit.SECONDS) // —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–∞–π–º–∞—É—Ç
        .connectionPool(ConnectionPool(0, 1, TimeUnit.NANOSECONDS)) // —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–ª–æ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö
        .build()

    //@SuppressLint("SetJavaScriptEnabled")
    @SuppressLint("SetTextI18n")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // UI
        scrollView = ScrollView(this)
        val layout = LinearLayout(this)
        layout.orientation = LinearLayout.VERTICAL

        logView = TextView(this)
        logView.setPadding(16, 16, 16, 16)

        inputField = EditText(this)
        inputField.hint = "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

        btnSend = Button(this)
        btnSend.text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å"

        btnSelectModel = Button(this)
        btnSelectModel.text = "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å"

        btnSetTokens = Button(this)
        btnSetTokens.text = "–ó–∞–¥–∞—Ç—å max_tokens (—Å–µ–π—á–∞—Å $maxTokens)"

        layout.addView(inputField)
        layout.addView(btnSend)
        layout.addView(btnSelectModel)
        layout.addView(btnSetTokens)
        layout.addView(logView)

        scrollView.addView(layout)
        setContentView(scrollView)

        ActivityCompat.requestPermissions(
            this,
            arrayOf(
                Manifest.permission.RECEIVE_SMS,
                Manifest.permission.SEND_SMS,
                Manifest.permission.INTERNET
            ),
            1
        )

        appendLog("‚Ñπ\uFE0F –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: $currentModel, max_tokens=$maxTokens")

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        btnSend.setOnClickListener {
            val text = inputField.text.toString().trim()
            if (text.isNotEmpty()) {
                appendLog("‚Ñπ\uFE0F –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞: $text")
                sendToAI(text) { response ->
                    runOnUiThread {
                        appendLog("\uD83E\uDD16 –û—Ç–≤–µ—Ç –æ—Ç AI: $response")
                        currentSender?.let { sender ->
                            sendSms(sender, response)
                            appendLog("\uD83D\uDCE8 –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ SMS –Ω–∞ $sender")
                        }
                    }
                }
            }
        }

        // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        btnSelectModel.setOnClickListener {
            showModelSelectionDialog()
        }

        // –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã max_tokens –≤—Ä—É—á–Ω—É—é
        btnSetTokens.setOnClickListener {
            showTokenInputDialog()
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∏—ë–º SMS
        registerReceiver(smsReceiver, IntentFilter("android.provider.Telephony.SMS_RECEIVED"))
    }

    // --- –ü—Ä–∏—ë–º SMS ---
    private val smsReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            val bundle = intent?.extras
            if (bundle != null) {
                val pdus = bundle["pdus"] as Array<*>
                for (pdu in pdus) {
                    val sms = SmsMessage.createFromPdu(pdu as ByteArray)
                    currentSender = sms.originatingAddress
                    val messageBody = sms.messageBody
                    appendLog("üì© –ü–æ–ª—É—á–µ–Ω–æ SMS –æ—Ç $currentSender: $messageBody")

                    // --- –ö–æ–º–∞–Ω–¥–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ ---
                    if (messageBody.startsWith("–°–ú–ï–ù–ò–¢–¨")) {
                        val parts = messageBody.split(" ")
                        if (parts.size == 2) {
                            val index = parts[1].toIntOrNull()
                            if (index != null && index in availableModels.indices) {
                                currentModel = availableModels[index]
                                appendLog("‚ÑπÔ∏è –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: $currentModel")
                            } else {
                                appendLog("‚ùóÔ∏è –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏")
                            }
                        }
                        return
                    }

                    // --- –ö–æ–º–∞–Ω–¥–∞ —Å–º–µ–Ω—ã max_tokens ---
                    if (messageBody.startsWith("MAX_TOKENS")) {
                        val parts = messageBody.split(" ")
                        if (parts.size == 2) {
                            val value = parts[1].toIntOrNull()
                            if (value != null && value > 0) {
                                maxTokens = value
                                appendLog("‚ÑπÔ∏è max_tokens –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ $maxTokens")
                                runOnUiThread {
                                    btnSetTokens.text = "–ó–∞–¥–∞—Ç—å max_tokens (—Å–µ–π—á–∞—Å $maxTokens)"
                                }
                            } else {
                                appendLog("‚ùóÔ∏è –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ max_tokens")
                            }
                        }
                        return
                    }

                    // --- –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ---
                    sendToAI(messageBody) { response ->
                        runOnUiThread {
                            appendLog("ü§ñ –û—Ç–≤–µ—Ç –Ω–∞ SMS –æ—Ç $currentSender:\n$response")
                            currentSender?.let { sender ->
                                sendSms(sender, response)
                                appendLog("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ SMS –Ω–∞ $sender")
                            }
                        }
                    }
                }
            }
        }
    }

    // --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ AI ---
    private fun sendToAI(userMessage: String, callback: (String) -> Unit) {
        val url = "https://api.intelligence.io.solutions/api/v1/chat/completions"

        val messages = JSONArray()
        messages.put(JSONObject().put("role", "system")
            .put("content", "You are a helpful assistant. Please answer concisely, but still informative."))
        messages.put(JSONObject().put("role", "user").put("content", userMessage))

        val bodyJson = JSONObject()
        bodyJson.put("model", currentModel)
        bodyJson.put("messages", messages)
        bodyJson.put("max_tokens", maxTokens)

        val request = Request.Builder()
            .url(url)
            .addHeader("Authorization", "Bearer $apiKey")
            .addHeader("Content-Type", "application/json")
            .post(RequestBody.create("application/json".toMediaType(), bodyJson.toString()))
            .build()

        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                runOnUiThread { appendLog("‚ùó\uFE0F –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${e.message}") }
            }

            override fun onResponse(call: Call, response: Response) {
                response.use {
                    if (!response.isSuccessful) {
                        runOnUiThread { appendLog("‚ùó\uFE0F –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: ${response.code}") }
                    } else {
                        val responseBody = response.body?.string()
                        val json = JSONObject(responseBody ?: "{}")
                        val choices = json.optJSONArray("choices")
                        val msg = choices?.optJSONObject(0)?.optJSONObject("message")
                        var content = msg?.optString("content") ?: "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"

                        if (currentModel.startsWith("DeepSeek", ignoreCase = true)) {
                            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –±–ª–æ–∫–∏ <think>...</think>
                            content = content.replace(
                                Regex("<think>[\\s\\S]*?</think>", setOf(RegexOption.IGNORE_CASE, RegexOption.DOT_MATCHES_ALL)),
                                ""
                            )
                        }

                        content = content.trim()

                        callback(content)
                    }
                }
            }
        })
    }


    // --- –û—Ç–ø—Ä–∞–≤–∫–∞ SMS ---
    private fun sendSms(phone: String, message: String) {
        val smsManager = SmsManager.getDefault()
        val parts = smsManager.divideMessage(message)
        smsManager.sendMultipartTextMessage(phone, null, parts, null, null)
    }

    // --- –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ ---
    private fun showModelSelectionDialog() {
        val builder = AlertDialog.Builder(this)
        builder.setTitle("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å")
        builder.setItems(availableModels.toTypedArray()) { _, which ->
            currentModel = availableModels[which]
            appendLog("‚Ñπ\uFE0F –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: $currentModel")
        }
        builder.show()
    }

    // --- –î–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ max_tokens ---
    private fun showTokenInputDialog() {
        val input = EditText(this)
        input.hint = "–í–≤–µ–¥–∏—Ç–µ max_tokens (—á–∏—Å–ª–æ)"
        val builder = AlertDialog.Builder(this)
        builder.setTitle("–ó–∞–¥–∞—Ç—å max_tokens")
        builder.setView(input)
        builder.setPositiveButton("OK") { _, _ ->
            val value = input.text.toString().toIntOrNull()
            if (value != null && value > 0) {
                maxTokens = value
                btnSetTokens.text = "–ó–∞–¥–∞—Ç—å max_tokens (—Å–µ–π—á–∞—Å $maxTokens)"
                appendLog("‚Ñπ\uFE0F max_tokens –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ $maxTokens")
            } else {
                appendLog("‚ùó\uFE0F –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ max_tokens")
            }
        }
        builder.setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
        builder.show()
    }

    // --- –õ–æ–≥ ---
    private fun appendLog(text: String) {
        logView.append("$text\n\n")
        scrollView.post { scrollView.fullScroll(ScrollView.FOCUS_DOWN) }
    }

    override fun onDestroy() {
        super.onDestroy()
        unregisterReceiver(smsReceiver)
    }
}